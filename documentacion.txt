    Número de Localizaciones:
        Se expande el entorno para incluir cuatro localizaciones: A, B, C y D.

    Representación Visual:  
        Ampliamos la visualización para mostrar las cuatro localizaciones en la pantalla. Cada localización se representa con un cuadrado de color, indicando si está limpia o sucia.

    Métodos y Atributos Adicionales:
            se introduce nuevos métodos y atributos en la clase IAspirador. Esto incluye:
            sumar_movimiento: Incrementa un contador de movimientos cada vez que el aspirador se mueve.
            desempeño: Calcula el rendimiento del aspirador basado en el número de movimientos realizados.
            contador_turtle: Un nuevo objeto Turtle que muestra el contador de movimientos en la pantalla.

    Método de Verificación del Estado del Ambiente:
        Se modifica el método verifica_estado_ambiente para iterar sobre todas las localizaciones (A, B, C, D) y limpiarlas si están sucias. Esto mejora la capacidad del aspirador para manejar un entorno más grande y variado.

    Posicionamiento del Aspirador:
        La posición inicial del aspirador no se muestra explícitamente en el código.
        en nuestra modificacion aspirador se coloca visualmente en la pantalla en la posición (-80, 0) al comienzo del programa. Luego, se mueve a las diferentes localizaciones para limpiarlas según sea necesario.

    Salida y Finalización:
         El codigo original finaliza mostrando las dos localizaciones limpias en la pantalla y termina la ejecución.
         después de limpiar todas las localizaciones, imprime el estado final del ambiente y el rendimiento del aspirador en términos de movimientos realizados. 
         Luego, espera antes de finalizar la ejecución, lo que permite al usuario ver los resultados durante un tiempo antes de que el programa termine.
    
    Heuristica: Exploración Eficiente.
        Necesitamos definir cómo representar el estado del problema y cómo 
        generar los sucesores de un estado dado. En este caso, el estado 
        del problema puede ser la configuración actual de suciedad 
        en las habitaciones, y los sucesores pueden ser las diferentes
        acciones que el aspirador puede tomar.

        Necesitamos una función de evaluación que estime cuán "bueno" es
        un estado dado. Esta función puede basarse en el número de habitaciones sucias 
        que quedan por limpiar, así como en la distancia de las habitaciones sucias más cercanas al 
        aspirador.
        
        Utilizaremos el algoritmo A* para buscar la secuencia óptima de acciones que el 
        aspirador debe tomar para limpiar todas las habitaciones de manera 
        eficiente. Esto implica una exploración de las posibles acciones, 
        teniendo en cuenta la heurística para guiar la búsqueda hacia la 
        solución óptima.